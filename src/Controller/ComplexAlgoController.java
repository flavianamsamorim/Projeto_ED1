/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Controller;

import Model.ComplexAlgoQuiz;
import View.ComplexAlgoView;
import java.util.LinkedHashMap;
import java.util.Map;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;

/**
 *
 * @author Cliente
 */
public class ComplexAlgoController {
    private ComplexAlgoQuiz model;
    private ComplexAlgoView view;

    public ComplexAlgoController(ComplexAlgoView view) {
        // Criando perguntas e respostas
        Map<String, String[]> perguntas = new LinkedHashMap<>();
        perguntas.put("1-O que a complexidade de algoritmos avalia \nprincipalmente?", new String[]{"A) Tamanho da entrada", "B) N√∫mero de itera√ß√µes", "C) Complexidade do espa√ßo"});
        perguntas.put("2-O que a an√°lise de pior caso considera?", new String[]{"A) Complexidad de espa√ßo", "B) Tempo mais longo de execu√ß√£o", "C) Melhor desempenho poss√≠vel"});
        perguntas.put("3-Qual √© a complexidade de tempo de um algoritmo \nque executa um n√∫mero fixo de opera√ß√µes?", new String[]{"A) O(1)", "B) O(n)", "C) O(log n)"});
        perguntas.put("4-O que significa dizer que um problema √© \n\"intrat√°vel\"?", new String[]{"A) N√£o pode ser resolvido em tempo polinomial", "B) N√£o tem solu√ß√£o", "C) Tem v√°rias solu√ß√µes"});
        perguntas.put("5-Qual √© a complexidade de tempo de um algoritmo de \nbusca bin√°ria em uma lista ordenada de n elementos?", new String[]{"A) O(logn)", "B) O(n)", "C) O(1)"});
        perguntas.put("6-Qual classe de complexidade inclui problemas \nsol√∫veis em tempo polinomial?", new String[]{"A) NP", "B) P", "C) NP-completo"});
        perguntas.put("7-Qual √© a nota√ß√£o para limite inferior que depende \ndo problema?", new String[]{"A) √îmega", "B) O grande", "C) Theta"});
        perguntas.put("8-Qual √© a nota√ß√£o para limite superior que depende \ndo algoritmo?", new String[]{"A) Theta", "B) O grande", "C) √îmega"});
        perguntas.put("9-Qual √© a complexidade  t√≠pica quando se reduz um \nproblema em subproblemas?", new String[]{"A) O(n)", "B) log n", "C) n log n"});
        perguntas.put("10-Qual √© a complexidade de um algoritmo de for√ßa bruta \npara resolver o Problema do Caixeiro Viajante?", new String[]{"A) O(log n)", "B) O(2^‚Åø)", "C) O(n)"});

        String[] respostasCorretas = {"A", "B","A", "A","A", "B","A", "C","C", "B"}; // As respostas corretas

        // Criando o quiz
        this.model = new ComplexAlgoQuiz(perguntas, respostasCorretas);
        this.view = view;
    }

    public void carregarPergunta() {
    if (model.isFimQuiz()) {
        view.mostrarFeedback("Parab√©ns! Voc√™ concluiu o quiz!");
    } else {
        Map.Entry<String, String[]> perguntaEntry = model.getPerguntaAtual();
        view.atualizarPergunta(perguntaEntry.getKey(), perguntaEntry.getValue()[0], perguntaEntry.getValue()[1], perguntaEntry.getValue()[2]);
        
        view.ativarOpcoes(); // Reativa os bot√µes para a nova pergunta
        view.limparFeedback(); // Limpa a mensagem da resposta anterior
    }
}

    // M√©todo para verificar a resposta do usu√°rio
    public void verificarResposta(String resposta) {
        boolean correta = model.verificarResposta(resposta);
        
        if (model.isFimQuiz()) {
            // Se for o fim do quiz, exibe um alerta em vez de feedback no label
            Alert alertaFimQuiz = new Alert(AlertType.INFORMATION);
            alertaFimQuiz.setTitle("Fim do Quiz");
            alertaFimQuiz.setHeaderText("Parab√©ns!");
            alertaFimQuiz.setContentText("Voc√™ completou o quiz. Deseja reiniciar?");
            alertaFimQuiz.showAndWait(); // Mostra o alerta e aguarda o fechamento
            
            // Aqui voc√™ pode reiniciar o quiz ou encerrar, conforme preferir.
            // Para reiniciar o quiz, voc√™ pode chamar:
            model.reiniciarQuiz();
            carregarPergunta();
        } else {
            // Caso contr√°rio, apenas exibe o feedback normal
            if (correta) {
                view.mostrarFeedback("Resposta correta! üéâ");
            } else {
                view.mostrarFeedback("Resposta errada! ‚ùå");
            }
            view.desativarOpcoes(); // Desativa os bot√µes ap√≥s a resposta
            model.avancarPergunta(); // Avan√ßa para a pr√≥xima pergunta
        }
    }
}